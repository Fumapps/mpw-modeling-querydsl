/*
 * generated by Xtext 2.23.0
 */
package de.unistuttgart.iste.sqa.mpw.modeling.querydsl.tests

import com.google.inject.Inject
import de.unistuttgart.iste.sqa.mpw.modeling.querydsl.querydsl.Model
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

@ExtendWith(InjectionExtension)
@InjectWith(QueryDslInjectorProvider)
class QueryDslParsingTest {
    @Inject
    ParseHelper<Model> parseHelper
    
    // used as default in tests where the expression part is not really relevant
    val simpleExpression = '''                  
                    expressions: [
                      BoolConstant:
                        value: true
                    ]
    '''
    
    @Test
    def void givenSimpleQueryReturningTrue_whenParse_thenQueryWithExpressionAndStatementAreParsed() {
        val result = parseHelper.parse('''
            context Hamster
            query myQuery: true;
        ''')
        assertModel(result, '''
            ClassContext:
              className: Hamster
              elements: [
                Query myQuery:
                  internal: false
                  expressions: [
                    BoolConstant:
                      value: true
                  ]
              ]
        ''')
    }
    
    @Test
    def void givenQueryWithTwoParameters_whenParse_thenQueryWithParametersIsParsed() {
        val result = parseHelper.parse('''
            context Hamster
            query myQuery(a: EString, b: EInt): true;
        ''')
        assertModel(result, '''
            ClassContext:
              className: Hamster
              elements: [
                Query myQuery:
                  internal: false
                  «simpleExpression»
                  parameterList: ParameterList:
                    parameters: [
                      Parameter:
                        variableName: a
                        typeName: EString
                      Parameter:
                        variableName: b
                        typeName: EInt
                    ]
              ]
        ''')
    }
    
    @Test
    def void givenTwoSimpleQuerys_whenParse_thenBothQueriesAreParsed() {
        val result = parseHelper.parse('''
            context Hamster
            query myQuery1: true;
            query myQuery2: true;
        ''')
        assertModel(result, '''
            ClassContext:
              className: Hamster
              elements: [
                Query myQuery1:
                  internal: false
                  «simpleExpression»
                Query myQuery2:
                  internal: false
                  «simpleExpression»
              ]
        ''')
    }
    
    @Test
    def void givenCommandContextWithParameters_whenParse_thenParametersAreParsed() {
        val result = parseHelper.parse('''
            context Hamster::myCommand(text: String)
            precondition: true;
        ''')
        assertModel(result, '''
            CommandContext:
              className: Hamster
              commandName: myCommand
              elements: [
                Precondition:
                  «simpleExpression»
              ]
              parameterList: ParameterList:
                parameters: [
                  Parameter:
                    variableName: text
                    typeName: String
                ]
        ''')
    }
    
    @Test
    def void givenPreconditionUsingQuery_whenParse_thenStatementUsingQueryIsParsed() {
        val result = parseHelper.parse('''
            context Hamster::myCommand
            precondition: self.myQuery();
        ''')
        assertModel(result, '''
            CommandContext:
              className: Hamster
              commandName: myCommand
              elements: [
                Precondition:
                  expressions: [
                    StatementsExpression:
                      statements: [
                        Statement:
                          target: self
                        Statement:
                          methodCall: MethodCall:
                            targetMethod: myQuery
                            parameters: []
                      ]
                  ]
              ]
        ''')
    }
    
    @Test
    def void givenPreconditionUsingQueryWithParameters_whenParse_thenStatementUsingQueryIsParsed() {
        val result = parseHelper.parse('''
            context Hamster::myCommand(number: Int)
            precondition: self.myQuery(number);
        ''')
        assertModel(result, '''
            CommandContext:
              className: Hamster
              commandName: myCommand
              elements: [
                Precondition:
                  expressions: [
                    StatementsExpression:
                      statements: [
                        Statement:
                          target: self
                        Statement:
                          methodCall: MethodCall:
                            targetMethod: myQuery
                            parameters: [number]
                      ]
                  ]
              ]
              parameterList: ParameterList:
                parameters: [
                  Parameter:
                    variableName: number
                    typeName: Int
                ]
        ''')
    }

    @Test
    def void givenPostconditionUsingOldValue_whenParse_thenStatementOfOldValueIsParsed() {
        val result = parseHelper.parse('''
            context Hamster::myCommand
            postcondition: self.grains->size() = old(self.grains->size()) + 1;
        ''')
        assertModel(result, '''
            CommandContext:
              className: Hamster
              commandName: myCommand
              elements: [
                Postcondition:
                  expressions: [
                    EqualityExpression:
                      operation: =
                      left: StatementsExpression:
                        statements: [
                          Statement:
                            target: self
                          Statement:
                            target: grains
                          Statement:
                            collectionTarget: SimpleCollectionMethod:
                              method: size
                        ]
                      right: PlusExpression:
                        left: OldValueExpression:
                          expression: StatementsExpression:
                            statements: [
                              Statement:
                                target: self
                              Statement:
                                target: grains
                              Statement:
                                collectionTarget: SimpleCollectionMethod:
                                  method: size
                            ]
                        right: IntConstant:
                          value: 1
                  ]
              ]
        ''')
    }
    
    @Test
    def void givenQueryWithDocumentation_whenParse_thenDocumentationIsParsedForQuery() {
        val result = parseHelper.parse('''
            context Hamster
            /** This query returns something useful. */
            query myQuery: true;
        ''')
        assertModel(result, '''
            ClassContext:
              className: Hamster
              elements: [
                Query myQuery:
                  documentation: /** This query returns something useful. */
                  internal: false
                  «simpleExpression»
              ]
        ''')
    }
    
    @Test
    def void givenInvariantWithDocumentation_whenParse_thenDocumentationIsParsedForInvariant() {
        val result = parseHelper.parse('''
            context Hamster
            /** This invariant checks something useful. */
            invariant: true;
        ''')
        assertModel(result, '''
            ClassContext:
              className: Hamster
              elements: [
                Invariant:
                  documentation: /** This invariant checks something useful. */
                  «simpleExpression»
              ]
        ''')
    }
    
    @Test
    def void givenPreconditionWithDocumentation_whenParse_thenDocumentationIsParsedForPrecondition() {
        val result = parseHelper.parse('''
            context Hamster::myCommand
            /** This precondition checks something useful. */
            precondition: true;
        ''')
        assertModel(result, '''
            CommandContext:
              className: Hamster
              commandName: myCommand
              elements: [
                Precondition:
                  documentation: /** This precondition checks something useful. */
                  «simpleExpression»
              ]
        ''')
    }
    
    @Test
    def void givenPostconditionWithDocumentation_whenParse_thenDocumentationIsParsedForPostcondition() {
        val result = parseHelper.parse('''
            context Hamster::myCommand
            /** This postcondition checks something useful. */
            postcondition: true;
        ''')
        assertModel(result, '''
            CommandContext:
              className: Hamster
              commandName: myCommand
              elements: [
                Postcondition:
                  documentation: /** This postcondition checks something useful. */
                  «simpleExpression»
              ]
        ''')
    }
    
    private def assertModel(Model actualModel, String expected) {
        Assertions.assertNotNull(actualModel)
        val errors = actualModel.eResource.errors
        Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
        
        var actual = ModelInstanceStringifier.toString(actualModel);
        Assertions.assertEquals(expected.trim().replace("\r\n", "\n"), actual);
    }
    
}
