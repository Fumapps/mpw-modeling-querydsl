grammar de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl with org.eclipse.xtext.common.Terminals

generate querydsl "http://www.mpw.uni-stuttgart.de/querydsl"

Model:
	Context
;
	
Context:
	ClassContext | CommandContext
;

ClassContext:
	'context' className=ID (elements+=Element)+
;

CommandContext:
	'context' className=ID '::' commandName=ID ('(' parameterList=ParameterList ')')? (elements+=Element)+
;
	
Element:
	Query | CommandConstraint | Invariant
;

Query:
	(documentation=DOCUMENTATION)? (internal?='internal')? 'query' name=ID ('(' parameterList=ParameterList ')')? ':' (expressions+=Expression ';')
;

CommandConstraint:
	Precondition | Postcondition
;

Precondition:
	(documentation=DOCUMENTATION)? 'precondition' (name=ID)? ':' (expressions+=Expression ';')
;

Postcondition:
	(documentation=DOCUMENTATION)? 'postcondition' (name=ID)? ':' (expressions+=Expression ';')
;

ParameterList:
	parameters+=Parameter (',' parameters+=Parameter)*
;

Parameter:
	variableName=ID ':' typeName=ID
;

Invariant:
	(documentation=DOCUMENTATION)? 'invariant' (name=ID)? ':' (expressions+=Expression ';')
;
	
Expression:
	ImpliesExpression
;

ImpliesExpression returns Expression:
	OrExpression ({ImpliesExpression.left=current} 'implies' right=OrExpression)*
;

OrExpression returns Expression:
	AndExpression ({OrExpression.left=current} 'or' right=AndExpression)*
;

AndExpression returns Expression:
	EqualityExpression ({AndExpression.left=current} 'and' right=EqualityExpression)*
;

EqualityExpression returns Expression:
	ComparisonExpression ({EqualityExpression.left=current} operation=('='|'<>') right=ComparisonExpression)*
;

ComparisonExpression returns Expression:
    PlusOrMinusExpression ({ComparisonExpression.left=current} op=(">="|"<="|">"|"<") right=PlusOrMinusExpression)*
;

PlusOrMinusExpression returns Expression:
    MultiplicationOrDivisionExpression ( ({PlusExpression.left=current} '+' | {MinusExpression.left=current} '-') right=MultiplicationOrDivisionExpression)*
;

MultiplicationOrDivisionExpression returns Expression:
    PrimaryExpression ( ({MultiplicationExpression.left=current} '*' | {DivisionExpression.left=current} '/') right=PrimaryExpression)*
;

PrimaryExpression returns Expression:
    '(' Expression ')' | {NotExpression} "!" expression=PrimaryExpression | PropertyPathExpression | OldValueExpression | ConstantExpression
;
    
ConstantExpression returns Expression:
    {IntConstant} value=INT |
    {StringConstant} value=STRING |
    {BoolConstant} value=('true'|'false') |
    {NullConstant} value='null'
;

OldValueExpression returns Expression:
    {OldValueExpression} 'old' '(' expression=PropertyPathExpression ')';

PropertyPathExpression returns Expression:
    {StatementsExpression} statements+=Statement statements+=(NavigatedStatement)*;
    
Statement:
	target='self' | target=Direction | target=ID;

NavigatedStatement returns Statement:
    ('.' methodCall=MethodCall) | ('.' target=ID) | ('->' collectionTarget=CollectionMethod);
    
MethodCall:
	targetMethod=ID ('(' parameters+=(ID)* ')' | '()');
    
CollectionMethod:
	SimpleCollectionMethod | ParametrizedCollectionMethod;
    
SimpleCollectionMethod:
	method=('notEmpty' | 'isEmpty' | 'size' ) '()';
    
ParametrizedCollectionMethod:
	('typeSelect(' typeSelect=ID ')') |
	('at(' indexExpression=Expression ')');
    
Direction:
	('EAST' | 'WEST' | 'SOUTH' | 'NORTH');

terminal DOCUMENTATION : '/**' -> '*/' ;
@Override 
terminal ML_COMMENT : ('/*' !'*') -> '*/' ;
@Override 
terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')? ;
